# AUTOGENERATED! DO NOT EDIT! File to edit: 01_dwpc.ipynb (unless otherwise specified).

__all__ = ['make_dwpc_query', 'patterns_to_query']

# Cell
def make_dwpc_query(genes, reltype, hops, only_relations_with_pmid=False):
    '''
    Make a cypher query to calculate DWPC

    input parameters

    genes : gene list
    reltype : edge type
    hops : number of hops to calculate
    only_relations_with_pmid : include only relations with pubmed_id

    output
    query:string
    '''
    qry_template="""MATCH p=(n0:Gene)-[:{reltype}*..{hops}]->(n1:Gene)
    WHERE n0.name in {genestr}
      AND n1.name in {genestr}
      AND n0 <> n1
      {conditionstr}
    WITH
        n0.name as source_name
      , n1.name as target_name
      , p as path
      , [r in relationships(p)|r.dwpc_score] as dwpc_scores
      , [r in relationships(p) | r.pubmed_id] as pubmed_ids
    WITH
        source_name
      , target_name
      , length(path) as len
      , reduce(acc=1, d in dwpc_scores|acc*d) as dwpc_score
      , [n IN nodes(path) | labels(n)[0]] as node_labels
      , [n IN nodes(path) | n.identifier] as node_identifiers
      , [r IN relationships(path) | type(r)] as rel_types
      , reduce(acc='', s in pubmed_ids | acc+';'+s) as pubmed_ids
    WITH
        source_name
      , target_name
      , dwpc_score as dwpc
      , [r IN rel_types | split(r, '_')[1]] as rtypes
      , "(:"+node_labels[0]+"{{identifier:'"+ node_identifiers[0] +"'}})" as head
      , [i IN range(0,len-1)| "-[:"+ rel_types[i] +"]->(:"+node_labels[i+1]+"{{identifier:'"+ node_identifiers[i+1] +"'}})" ] as tail
      , substring(pubmed_ids,1) as pubmed_ids
    RETURN
        source_name
      , target_name
      , dwpc
      , head + reduce(acc='', s in tail |acc+s) as pattern
      , reduce(acc='', s IN rtypes | acc + s) as type_pattern
      , pubmed_ids
    """
    only_if_pubmed_id_exists="AND all(r IN relationships(p) WHERE exists(r.pubmed_id)) "

    genelist_str="{}{}{}".format("['", "','".join(genes), "']")

    conditionstr=''
    if only_relations_with_pmid:
        conditionstr=conditionstr + only_if_pubmed_id_exists

    qry=qry_template.format(genestr=genelist_str,
                            reltype=reltype,
                            hops=hops,
                            conditionstr=conditionstr)
    return qry


def patterns_to_query(patterns):
    '''
    Convert pattern list to cypher query

    Example

    input patterns:list:

    ["(:Gene{identifier:'2534'})-[:INTERACTS_GiG3]->(:Gene{identifier:'201633'})",
    "(:Gene{identifier:'2534'})-[:INTERACTS_GiG3]->(:Gene{identifier:'2533'})-[:INTERACTS_GiG3]->(:Gene{identifier:'2534'})-[:INTERACTS_GiG3]->(:Gene{identifier:'201633'})",
    "(:Gene{identifier:'2534'})-[:INTERACTS_GiG3]->(:Gene{identifier:'7827'})-[:INTERACTS_GiG3]->(:Gene{identifier:'2534'})-[:INTERACTS_GiG3]->(:Gene{identifier:'201633'})",
    "(:Gene{identifier:'2534'})-[:INTERACTS_GiG3]->(:Gene{identifier:'55243'})-[:INTERACTS_GiG3]->(:Gene{identifier:'2534'})-[:INTERACTS_GiG3]->(:Gene{identifier:'201633'})"]

    output query:string
    "MATCH p0=(:Gene{identifier:'2534'})-[:INTERACTS_GiG3]->(:Gene{identifier:'201633'})
    MATCH p1=(:Gene{identifier:'2534'})-[:INTERACTS_GiG3]->(:Gene{identifier:'2533'})-[:INTERACTS_GiG3]->(:Gene{identifier:'2534'})-[:INTERACTS_GiG3]->(:Gene{identifier:'201633'})
    MATCH p2=(:Gene{identifier:'2534'})-[:INTERACTS_GiG3]->(:Gene{identifier:'7827'})-[:INTERACTS_GiG3]->(:Gene{identifier:'2534'})-[:INTERACTS_GiG3]->(:Gene{identifier:'201633'})
    MATCH p3=(:Gene{identifier:'2534'})-[:INTERACTS_GiG3]->(:Gene{identifier:'55243'})-[:INTERACTS_GiG3]->(:Gene{identifier:'2534'})-[:INTERACTS_GiG3]->(:Gene{identifier:'201633'})
    RETURN p0,p1,p2,p3"
    '''
    match_phrases=[]
    for i, pattern in enumerate(patterns):
        match_phrases.append('MATCH p{i}={pattern} '.format(i=i, pattern=pattern))

    return_phrase='RETURN ' + ','.join(["p{}".format(i) for i in range(len(patterns))])

    query= ' '.join(match_phrases) + return_phrase

    return query